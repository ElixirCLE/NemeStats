@using Microsoft.Owin.Security

@{
    if (TempData.ContainsKey("Registration"))
    {
        <h4>Use another service to  @TempData["Registration"].ToString().</h4>
    }
    else
    {
        <h4>Add New External Login</h4>
    }
}
<hr />
@{
    var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
    var authenticationDescriptions = loginProviders as AuthenticationDescription[] ?? loginProviders.ToArray();
    if (!authenticationDescriptions.Any())
    {
        <div>
            <p>There are no external authentication services configured. See <a href="http://go.microsoft.com/fwlink/?LinkId=313242">this article</a>
            for details on setting up this ASP.NET application to support logging in via external services.</p>
        </div>
    }
    else
    {
        string action = Model.Action;
        string returnUrl = Model.ReturnUrl;
        using (Html.BeginForm(action, "Account", new { ReturnUrl = returnUrl }))
        {
            @Html.AntiForgeryToken()
            <div id="socialLoginList">
                <p>
                @foreach (AuthenticationDescription p in authenticationDescriptions)
                {
                    if (string.Equals(@p.AuthenticationType, "Google", StringComparison.InvariantCultureIgnoreCase))
                    {
                        <button type="submit" class="btn btn-info btn-lg" id="gtm-google-login-button" name="provider" value="@p.AuthenticationType" title="Log in using your @p.Caption account"><i class="fa fa-google"></i>    Sign in with Google</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-default" id="@p.AuthenticationType" name="provider" value="@p.AuthenticationType" title="Log in using your @p.Caption account">@p.AuthenticationType</button>
                    }
                }
                </p>
            </div>
        }
    }
}
